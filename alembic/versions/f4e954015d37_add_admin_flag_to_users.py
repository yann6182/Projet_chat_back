"""add_admin_flag_to_users

Revision ID: f4e954015d37
Revises: 64a3f874b15f
Create Date: 2025-05-30 13:32:07.904528

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f4e954015d37'
down_revision: Union[str, None] = '64a3f874b15f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_rag_citations_id', table_name='rag_citations')
    op.drop_table('rag_citations')
    op.drop_index('ix_rag_documents_document_id', table_name='rag_documents')
    op.drop_index('ix_rag_documents_id', table_name='rag_documents')
    op.drop_table('rag_documents')
    op.drop_index('ix_rag_sources_id', table_name='rag_sources')
    op.drop_table('rag_sources')
    op.drop_index('ix_rag_responses_id', table_name='rag_responses')
    op.drop_table('rag_responses')
    op.drop_column('responses', 'is_rag')
    op.add_column('users', sa.Column('is_admin', sa.Boolean(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'is_admin')
    op.add_column('responses', sa.Column('is_rag', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
    op.create_table('rag_responses',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('rag_responses_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('response_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('retrieval_time_ms', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('generation_time_ms', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['response_id'], ['responses.id'], name='rag_responses_response_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='rag_responses_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_rag_responses_id', 'rag_responses', ['id'], unique=False)
    op.create_table('rag_sources',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('rag_sources_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('rag_response_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('document_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('page', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('relevance_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['rag_response_id'], ['rag_responses.id'], name='rag_sources_rag_response_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='rag_sources_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_rag_sources_id', 'rag_sources', ['id'], unique=False)
    op.create_table('rag_documents',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('document_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('mime_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('path', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='rag_documents_pkey')
    )
    op.create_index('ix_rag_documents_id', 'rag_documents', ['id'], unique=False)
    op.create_index('ix_rag_documents_document_id', 'rag_documents', ['document_id'], unique=False)
    op.create_table('rag_citations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('rag_response_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('citation_text', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('source_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['rag_response_id'], ['rag_responses.id'], name='rag_citations_rag_response_id_fkey'),
    sa.ForeignKeyConstraint(['source_id'], ['rag_sources.id'], name='rag_citations_source_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='rag_citations_pkey')
    )
    op.create_index('ix_rag_citations_id', 'rag_citations', ['id'], unique=False)
    # ### end Alembic commands ###
